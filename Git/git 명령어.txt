- 초기 설정
git config --global user.name "(본인이름)"
git config --global user.email "(본인 이메일)"
git config --global init.defaultBranch main

- 명령어
git init : 해당 파일을 git이 관리하도록 만든다.(투명파일 생성)
git status : 현재 git 상태를 보여준다.
.gitignore : git의 관리에서 특정 파일/폴더를 배제한다.(안에 작성)
git add (특정파일): 특정 파일을 add한다.
git add . : 모든 파일을 add한다.
git commit : add된 파일을 커밋한다.
git commit -m"(메세지)" : add된 파일을 메세지의 이름으로 커밋한다. 
git log : 지금까지 git의 변화들을 보여준다.(:q로 빠져나가기)
{Reset vs Revert}
git reset --hard (돌아갈 커밋 해시) : git log를 통해 '돌아갈 커밋 해시'를 알아내고
이를 통해 그 커밋으로 돌아간다. (이후의 커밋들 모두 삭제)
git revert (되돌릴 커밋 해시) : git log를 통해 '되돌릴 커밋 해시'를 알아내고
이를 통해 그것에 반대되는 변화를 줘서 새롭게 commit한다.(이후의 커밋들 유지)
git rm 파일이름 : git에서 그 파일 삭제
git branch (branch이름) : branch이름을 가진 브랜치 생성
git branch : 브랜치 목록 확인
git switch (branch이름) : branch이름을 가진 브랜치로 이동(기존 checkout에서 바뀜)
git switch -c (branch이름) : branch이름을 가진 브랜치를 만들고 거기로 이동
git branch -d (삭제할 브랜치명) : 브랜치 삭제
git branch -m (이름바꾸기전 브랜치명)(바꾼이름 브랜치명) : 브랜치 이름 변경
{Marge vs Rebase}
marge : 새로운 브랜치 가지를 병합하여 줄기가 합쳐지는 새로운커밋이 생겨난다.
rebase : 기존의 브랜치에 rebase할 브랜치의 변화들을 commit을 한 것 처럼 만든다.
차이점 : 히스토리 내역에 marge는 가지가 남지만, rebase는 남지 않는다.
git merge (브랜치 명) : 현재 브랜치에 브랜치명을 가진 브랜치를 병합한다.(main에서 진행)
merge후 git branch -d (브랜치명)을 이용하여 병합했던 브랜치 삭제
git rebase (main) : 현재 브랜치를 메인에 rebase함
main 브랜치가 끝을 가리키게 하기 위해선 git marge (rebase한 브랜치)를 진행
전부 끝났으면 rebase했던 branch 삭제
-충돌해결문제
git merge를 진행했는데 똑같은 부분에 수정을 가했다면 에러가 나오게 된다.
그럴 땐 충돌난 부분을 수정해 주어야하는데 너무 많아서 merge를 중단하고 싶다면
git merge --abort를 입력하면 된다.(rebase일땐 git rebase --abort사용)
충돌을 해결했다면 add-commit순서로 하면 병합이 완료된다.(rebase일땐 add후에 git rebase --continue를 해준다. 왜냐하면 한번으로 안 끝날 수 도 있기 때문이다.)
git remote add origin (원격 저장소 주소) : 로컬의 git 저장소에 원격 저장소로의 연결 추가(흔히 origin을 사용한다.)
git clone (https주소) : 현재 폴더에 https주소의 git저장소를 다운로드한다.
git push -u origin main : 처음에 지정해놓으면 나중에 git push를 입력할때, origin main으로 push된다.
가장 먼저 pull을 진행하고 push를 해야한다.
※ push 할 것이 있을 시 pull 하는 두 가지 방법
- git pull --no-rebase - merge방식
- git pull --rebase - rebase방식(협업시 사용 ok)
git branch -a : 원격브랜치들도 확인가능
git fetch : 원격의 변경사항 확인
git switch -t origin/from-remote : 로컬에 같은 이름의 브랜치를 생성하여 연결하고 switch
git push (원격 이름) --delete (원격의 브랜치명) : 원격의 브랜치 삭제
