샘플 : http://opentutorials.org:3000/main?id=HTML&page=12

1. http(하이퍼 텍스트 트랜스퍼 프로토콜)는 protocol 통신 규칙, 즉 사용자가 서버에 접속할 때 어떻게 접속할 것인가에 대한 부분
웹 브라우저와 웹 서버가 서로 데이터를 주고 받기 위해서 만든 통신 규칙.(만약 ftp를 사용하면 ftp로 시작한다.)

2. opentutorials.org는 도메인 네임(domain) 혹은 호스트(host)라고도 한다. 호스트란 인터넷에 접속되어 있는 각각의 컴퓨터를 뜻한다.
즉, opentutorials.org는 어떤 특정한 인터넷에 연결되어 있는 컴퓨터를 가르키는 주소이다.

3. 3000은 포트 번호이다. 한 대의 컴퓨터안에 여러 대의 서버가 있을 수 있다. 그러면 클라이언트가 접속했을 때, 그 중에 어떤 서버와 접속해야
할지가 애매하다. 그래서 접속할 때 3000이라 하면 3000번 포트에 연결되어 있는 서버와 통신하게 된다.(기본값은 80이다.)

4. main은 path이다. 그 컴퓨터 안에 있는 어떤 디렉토리에 어떤 파일인지를 가리킨다.

5. id=HTML&page=12는 query string이다. 이것이 핵심인데, 값을 변경하면 앞에 있는 웹서버에게 데이터를 전달할 수 있다.(ex.내가 읽고싶은 정보는
HTML이고, 12page이다.) query string의 시작은 ?로 약속되어 있고, 값과 값을 연결할 땐, &를 사용해야한다.

- CRUD : 정보 시스템의 핵심적인 메커니즘
C : create
R : read
U : update
D : delete

동기 vs 비동기
동기 : 일을 순차적으로 처리한다. 가령 오래 걸리는 작업이 있더라도 기다려서 처리한다.
비동기 : 병렬적으로 여러 가지를 처리한다.

콜백함수: 파라미터로 들어간 함수, 함수실행이 끝나고 콜백함수를 실행한다.

pm2 start main.js - main.js시작
pm2 list - 리스트 보기
pm2 stop main - main.js 중지
pm2 log(시작할 때 --watch하고) - 로그 화면보기

HTML의 form태그를 통해 서버로 데이터를 전송할 수 있다. action 속성에 주소를 넣으면 그 주소로 데이터를 보낸다.
어떤 특정 웹페이지를 가져갈 때 ?id=HTML이라고 표시되는건 좋은 방법이다. 왜냐하면 주소상에 우리가 필요한 데이터가 포함이 되어있어야 그것을 카피해서 전송해도 그 사람이 클릭해서 올 수 있다. 하지만 글을 작성하거나 수정, 삭제 하는 경우에는 주소에 값이 포함되어 있다면 그 주소를 카피해서 보냈을 때, 우리 서버에 있는 정보가 수정되거나 삭제되거나 생성되는 사건이 일어날 수 있다.
즉, 서버에서 데이터를 가져올 때는(GET) 커리 스트링(?~)을 사용하고 데이터를 생성, 수정, 삭제할 땐 눈에 보이지 않는 방식으로 보내야한다.(method="post")